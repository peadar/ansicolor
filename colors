#!/usr/bin/env python3
import sys, os, math
from contextlib import contextmanager

shown = 0
def o(s):
    global shown
    sys.stdout.write(s)
    shown += s.count("\n")

STOP = "\033[0m"
CLS =  "\033[2J"
HOME =  "\033[H"

@contextmanager
def EightBitBackground(color):
    o(f"\033[48;5;{color}m")
    yield
    o(STOP)

@contextmanager
def EightBitForeground(color):
    o(f"\033[38;5;{color}m")
    yield
    o(STOP)

@contextmanager
def AltScreen():
    o(f"\033[?1049h")
    yield
    o(f"\033[?1049l")

@contextmanager
def TrueColor(r, g, b):
    o(f"\033[48;2;{r};{g};{b}m")
    yield
    o(STOP)

try:
    sz = os.get_terminal_size()
    cols, rows = sz.columns, sz.lines
except:
    cols, rows = 80, 24
colincr = 256 / cols

def cells(index, count, space):
    # width of the Nth field of count. In theory, (index/count) * cols, but we need to distribute the fractional bits 
    per = float(space) / count
    start = index * per
    end = (index + 1) * per
    return int ( math.floor(end) - math.floor(start) ) 

def widthof(index, count):
    return cells(index, count, cols)

def heightof(index, count):
    return cells(index, count, rows)

def basic():
    o("Basic ANSI 16-color\n")
    for ctx in ( EightBitForeground, EightBitBackground ):
        # Show first 16 separately
        for color in range(16):
            with ctx(color):
                o(f"{color :>{widthof(color,16)-1}} ")
        o("\n")
    o("\nRemaining 8-bit color pallette\n")
    for ctx in ( EightBitForeground, EightBitBackground ):
        for colormajor in range(16, 256, 24):
            for colorminor in range(24):
                with ctx(colormajor+colorminor):
                    o(f"{colorminor+colormajor :>{widthof(colorminor,24)}}")
            o("\n")

def primaries():
    o("\nTrue color - primaries\n")
    for m in [ (1,0,0), (0,1,0), (0,0,1), (1,1,0), (1,0,1), (0,1,1), (1,1,1) ]:
        intensity = 0
        if shown >= rows - 1:
            break
        while intensity <= 255:
            i = int(intensity)
            with TrueColor(*((a * b) for a, b in zip(m, (i, i, i)))):
                o(" ")
            intensity += colincr
        o("\n")

def cube():
    # We'll draw up to 16 lines in our cube.
    cubelines = min(rows - 3 - shown, 24)

    # but we want at least 11
    if cubelines <= 10:
        return

    o("\nTrue color - color cube\n")
    greenincr = colincr
    blueincr = colincr * 8
    redincr = 256/cubelines
    red = 0
    while red <= 255:
        blue = 0
        green = 0
        while green <= 255:
            with TrueColor( int(red) % 256, int(green) % 256, int(blue)%256):
                o(" ")
            blue += blueincr
            green += greenincr
        o("\n")
        red += redincr

def testChart():
    basic()
    primaries()
    cube()

if __name__ == "__main__":
    with AltScreen():
        o(CLS + HOME)
        testChart()
        sys.stdin.readline()
