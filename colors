#!/usr/bin/env python3
import sys, os, math
from contextlib import contextmanager

shown = 0
def o(s):
    global shown
    sys.stdout.write(s)
    shown += s.count("\n")

STOP = "\033[0m"
CLS =  "\033[2J"
HOME =  "\033[H"

@contextmanager
def EightBitColor(color):
    o(f"\033[48;5;{color}m")
    yield
    o(STOP)

@contextmanager
def AltScreen():
    o(f"\033[?1049h")
    yield
    o(f"\033[?1049l")

@contextmanager
def TrueColor(r, g, b):
    o(f"\033[48;2;{r};{g};{b}m")
    yield
    o(STOP)

try:
    sz = os.get_terminal_size()
    cols, rows = sz.columns, sz.lines
except:
    cols, rows = 80, 24
colincr = 256 / cols

def widthof(index, count):
    per = cols / count
    start = index * per
    end = start + per
    start = math.floor(start)
    end = math.floor(end)
    return int(end - start)

def basic():
    o("Basic 16 ANSI colors\n")
    for color in range(16):
        with EightBitColor(color):
            o(f"{color :>{widthof(color,16)-1}} ")
    o("\n\nRemaining entries in 256 color palette\n")
    for colormajor in range(16, 256, 24):
        for colorminor in range(24):
            with EightBitColor(colormajor+colorminor):
                o(f"{colorminor+colormajor :>{widthof(colorminor,24)}}")
        o("\n")

def primaries():
    o("\nTrue color - primary colors\n")
    for m in [ (1,0,0), (0,1,0), (0,0,1), (1,1,0), (1,0,1), (0,1,1), (1,1,1) ]:
        intensity = 0
        while intensity <= 255:
            i = int(intensity)
            with TrueColor(*((a * b) for a, b in zip(m, (i, i, i)))):
                o(" ")
            intensity += colincr
        o("\n")

def cube():
    cubelines = min(rows - 3 - shown, 16)
    if cubelines > 10:
        greenincr = colincr * 16
        blueincr = 256/cubelines
        blue = 0
        o("\nTrue color - sliced color cube\n")
        while blue <= 255:
            red = 0
            green = 0
            while red <= 255:
                with TrueColor( int(red) % 256, int(green) % 256, int(blue)%256):
                    o(" ")
                red += colincr
                green += greenincr
            o("\n")
            blue += blueincr

def testChart():
    basic()
    primaries()
    cube()

if __name__ == "__main__":
    with AltScreen():
        o(CLS + HOME)
        testChart()
        sys.stdin.readline()
